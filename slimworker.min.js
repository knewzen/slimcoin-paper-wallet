importScripts("sha256.min.js","dcrypt.min.js")

function hex2a(hexx) {
    var hex = hexx.toString();//force conversion
    var str = '';
    for (var i = 0; i < hex.length; i += 2)
        str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
    return str;
}

function a2hex(str) {
  var arr = [];
  for (var i = 0, l = str.length; i < l; i ++) {
    var hex = Number(str.charCodeAt(i)).toString(16);
    if (hex.length == 1) arr.push("0")
    arr.push(hex);
  }
  return arr.join('');
}

function rev256(x) {
  var rev = ""; for (i = 64; i > 0; i-=2) rev += x.substr(i-2,2); return rev;
}

var hashPad = "000000800000000000000000000000000000000000000000000000000000000000000000000000000000000080020000";

self.onmessage = function( e ) {
 e = e.data;
 var last = "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
 dcrypt_work = e[0]; dcrypt_diff = e[1]; startpt = e[2]; dcrypt_iter = e[3]; minerid = e[4];
 var result, i, hit = "";
 var cnt = 0, msg = hex2a( dcrypt_work + hashPad );
 t = (new Date()).getTime(); 
 for (i = startpt ; i < startpt + dcrypt_iter; i+=1) { 
  msg = msg.substr(0,76) + String.fromCharCode( (i / 16777216) % 256 )
                         + String.fromCharCode( (i /    65536) % 256 )
                         + String.fromCharCode( (i /      256) % 256 )
                         + String.fromCharCode(  i             % 256 ) + msg.substr(80);
  x = dcrypt(msg);
  if (x != false) {
   if (parseInt( rev256(last), 16 ) > parseInt( rev256(x), 16 )) last = x;
   cnt += 1; 
/*
   if (x[58] == 0)
    if (x[59] == 0)
*/
       if (parseInt( rev256(x), 16 ) < 1e73)
        {
          //if (parseInt(x, 16) < 1e74) {
           hit = a2hex(msg.substr(0,80)); 
           //console.log("Miner found: " + hit);
           i += 1; // increment start pointer
           break;
          //}
        }
  }
 }; 
 t_1 = (new Date()).getTime() - t; 
 self.postMessage( [cnt, i, dcrypt_work, hit, minerid, last] ) 
}
